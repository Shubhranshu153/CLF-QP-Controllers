function [hin,h,dH] = dynamics_constraints(z, N, nx, nu,nt, dt)
%DYNAMICS_CONSTRAINTS(z) compiles the dynamics constraints generated by
%dynamics_constraint_with_derivative.
%   @param z: decision variable (column) vector containing the x_i and u_i
%   @param N: number of sample points; scalar
%   @param nx: dimension of state vector, x; scalar
%   @param nu: dimension of input vector, u; scalar
%   @param dt: \Delta t, the inter-sample interval duration; scalar

%   @output h: compiled h_i from dynamics_constraint_with_derivative;
%   (N-1)*nx by 1 vector
%   @output dH_i: compiled dH_i from dynamics_constraint_with_derivative;
%   (N-1)*nx by nz matrix

    h = zeros((N-1)*(nx+1)+5, 1);
    hin= zeros(4*(N-1)+1, 1);
    dH = zeros((N-1)*(nx+1)+5, N*(nx + nu+nt));

    for i=1:(N-1)
        [x_i_inds,u_i_inds,dt_i_inds] = sample_indices(i, nx, nu,nt);
        [x_ip1_inds,u_ip1_inds,~] = sample_indices(i + 1, nx, nu,nt);

        % TODO: call dynamics_constraint_with_derivative ith sample
        [h_i, dH_i] = dynamics_constraint_with_derivative(z(x_i_inds), ...
            z(u_i_inds), z(x_ip1_inds), z(u_ip1_inds), z(dt_i_inds));

        % TODO fit h_i and dH_i into h and dH, respectively.
        h((1:nx) + nx * (i-1)) = h_i;
        dH((1:nx) + nx * (i-1), [x_i_inds u_i_inds x_ip1_inds u_ip1_inds]) = ...
            dH_i;
%         %Knee hyperextension
   %     hin(i)=-(z(x_i_inds(2))-z(x_i_inds(1))); %theta2-theta1<0
     %   hin((N-1)+i)=+(z(x_i_inds(4))-z(x_i_inds(5)));  %theta4-theta5<0  
 %       hin(2*(N-1)+i)=z(x_i_inds(6)); 
         h((N-1)*(nx)+i)=z(u_i_inds(1));
         
    end

   
    
    theta_dot_plus = impact_dynamics(z,nx,nu,nt,N);
    h((N-1)*(nx+1)+1,1)=theta_dot_plus(1)-z(6);
    h((N-1)*(nx+1)+2,1)=theta_dot_plus(2)-z(7);
    h((N-1)*(nx+1)+3,1)=theta_dot_plus(3)-z(8);
    h((N-1)*(nx+1)+4,1)=theta_dot_plus(4)-z(9);
    h((N-1)*(nx+1)+5,1)=theta_dot_plus(5)-z(10);
    p=params();
          for i=2:N-2
                 [x_i_inds,u_i_inds,~] = sample_indices(i, nx, nu,nt);
                  hin(3*(N-1)+i)=-((p.l1*cos(z(x_i_inds(1)))+p.l2*cos(z(x_i_inds(2)))-p.l4*cos(z(x_i_inds(4)))-p.l5*cos(z(x_i_inds(5)))));
                  disp(hin(3*(N-1)+i));
          end
       [x_1_inds,u_1_inds,~]=   sample_indices(1, nx, nu,nt);
       hin(4*(N-1)+1)=(((p.l5*sin(z(x_1_inds(1))))*(z(x_1_inds(6))))+((p.l2*sin(z(x_1_inds(2))))*(z(x_1_inds(7))))-((p.l4*sin(z(x_1_inds(4))))*(z(x_1_inds(9))))-(p.l5*sin(z(x_1_inds(5)))*(z(x_1_inds(10)))))+.1;
   

end